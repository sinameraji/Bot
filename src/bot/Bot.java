/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bot;
import java.util.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.io.PrintWriter;
import java.util.Locale;
//import javax.speech.Central;
//import javax.speech.synthesis.Synthesizer;
//import javax.speech.synthesis.SynthesizerModeDesc;
import java.io.FileOutputStream;
import java.io.IOException;


public class Bot extends javax.swing.JFrame {
    int messageID;
    
    /**
     * Creates new form NewJFrame
     */
    public Bot() {
        initComponents();
        ArrayList<String> convoHistory = readFromFile();
        if (convoHistory.size() > 0){
            this.messageID = Integer.parseInt(convoHistory.get(convoHistory.size() - 1).split(":")[0]);
        } else
            this.messageID = 0;
        
//        System.out.println(this.messageID);
        sendMessage("Hello! Before you start asking me questions, give me some information about your world.");
        sendMessage("coz idk shit about things.");
    }
    
    void sendMessage(String message){
        this.jTextArea1.append("Bot: " + message + "\n\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    String userMessage = "";
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userMessage = jTextField1.getText();
        jTextField1.setText("");
        jTextArea1.setText(jTextArea1.getText() + "You: " + userMessage + "\n\n");
        if(!userMessage.equals(""))
            understand(userMessage);
    }//GEN-LAST:event_jButton1ActionPerformed
    private void understand(String userMessage){
        // label incoming message as Question OR information and process accordingly
        if(userMessage.charAt(userMessage.length()-1) == '?'){
            userMessage = userMessage.replace("?", "");
            answer(userMessage);
        }
        else {
            if(!isGreeting(userMessage))
                learn(userMessage);
            else
                sayHi();
        }
    }
    
    void answer(String userMessage){
//        basic(userMessage); //just search keywords and return most similar statement from data.txt
        pro(userMessage);
        
    }
    void basic(String userMessage){
        search(toArrayListString(removeStopwords(userMessage)));
    }
    
    ArrayList<String> readFromFile(){
        ArrayList<String> fileContent = new ArrayList<>();
        try{
            Scanner read = new Scanner (new FileInputStream("/Users/mac/Craft/bot/src/bot/data.txt"));
            while(read.hasNextLine()){
                String line = read.nextLine();
                fileContent.add(line);
            }
            read.close();
        }
        catch (FileNotFoundException e){
            System.out.println("File not found. Please update the data.txt file directory");
        }
        return fileContent;
    }
    
    String search(ArrayList<String> userMessage){
        boolean found = false;
        String latestFound = "";
        ArrayList<String> fileContent = readFromFile();
        for (String wordInMessage : userMessage){
            for(int i = 0; i < fileContent.size(); i++){
                for(String wordInDB : fileContent.get(i).split("\t | \t")[0].split(":")[1].split(",")){
                    wordInDB = wordInDB.replaceAll("\\s+","");
                    if (wordInMessage.equalsIgnoreCase(wordInDB)){
                        if(!found){
                            sendMessage("Here's what I found:");
                        }
                        found = true;
                        System.out.println(fileContent.get(i).split(":")[0]);
//                        System.out.println(fileContent.get(i).split("\t | \t")[2]);
                        latestFound = fileContent.get(i).split("\t | \t")[2];
                        sendMessage(fileContent.get(i).split("\t | \t")[2] + "\n\n");
                    }
                }
            }
        }
        return "";
    }
    
    void learn(String userMessage){
        store(toArrayListString(removeStopwords(userMessage)), userMessage);
        this.jTextArea1.setText(this.jTextArea1.getText() + "Bot: " + "Cool! I'll remember that." + "\n\n");
        System.out.println("Learned incoming message: " + userMessage);
    }
    
    void store(ArrayList<String> keywords, String userMessage){
//        System.out.println("size of keywords list: "+keywords.size());
        keywords.removeAll(Arrays.asList(null,""));
//        for (String k : keywords){
//            System.out.print("*** "+k);
//        }
        this.messageID += 1;
        if(keywords.size() == 0) {
                System.out.println("nothing");
        }
        else {
            if(keywords.get(0).equals(" ")){
                keywords.remove(0);
            }
            try{
                PrintWriter write = new PrintWriter(new FileOutputStream("/Users/mac/Craft/bot/src/bot/data.txt", true));
                write.print(this.messageID + ": ");
                for(int i = 0; i < keywords.size(); i++){
                    if(i != keywords.size() -1 ){
                        write.print(keywords.get(i) + ",");
                    }
                    else
                        write.print(keywords.get(i) + "\t | \t" + userMessage + "\n");
                }
                write.close();
            }
            catch(IOException e){
                System.out.println("Writing to data.txt failed, please update the file directory.");
            }
        }
    }
    
    ArrayList<String> messageToList(String sentence){
        ArrayList<String> targets = new ArrayList<>();
        for (int i = 0; i < sentence.split(" ").length; i++){
            targets.add(sentence.split(" ")[i]);
//            System.out.println(sentence.split(" ")[i]);
        }
        return targets;
    }
    
    ArrayList<String> toArrayListString(String[] array){
        ArrayList<String> thing = new ArrayList<>();
        for (String word : array){
            thing.add(word);
        }
//        System.out.println(thing.size());
        return thing;
    }
    
    String[] removeStopwords(String sentence){
        String[] stopwords = {"i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself", "yourselves", "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself", "they", "them", "their", "theirs", "themselves", "what", "which", "who", "whom", "this", "that", "these", "those", "am", "is", "are", "was", "were", "be", "been", "being", "have", "has", "had", "having", "do", "does", "did", "doing", "a", "an", "the", "and", "but", "if", "or", "because", "as", "until", "while", "of", "at", "by", "for", "with", "about", "against", "between", "into", "through", "during", "before", "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off", "over", "under", "again", "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any", "both", "each", "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so", "than", "too", "very", "s", "t", "can", "will", "just", "don", "should", "now"};
        for(String stopword : stopwords){
            String regex = "\\s*\\b" + stopword + "\\b\\s*";
            sentence = sentence.toLowerCase().replaceAll(regex, " ");
        }
        
//        System.out.println(sentence);
//        for(String word : sentence.split(" "))
//            System.out.println(word);
        return sentence.split(" ");
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Bot().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private boolean isGreeting(String userMessage) {
        String[] hi = {"hi", "hello", "hey", "hai"};
        for(String word : userMessage.split(" ")){
            for(String h : hi){
                if (word.equalsIgnoreCase(h))
                    return true;
            }
        }
        return false;
    }

    private void sayHi() {
        sendMessage("Yo");
    }

    private void pro(String question) {
        guessPOS(question);
    }
    void guessPOS(String question){
        // Part of Speech tagging on the fly! 
        // using common sense probability in limited length sentences
        String verb = "", pronoun = "", article = "",object = "", verb2 = "";
        int sentenceLength = question.split(" ").length;
        if(sentenceLength < 6){
            if(sentenceLength == 5){
                if(isYesNoQuestion(question)){
                    if(beOrElse(question) == 0){    //if it's not a "am,is,are" question.
                        pronoun = question.split(" ")[1];
                        verb = question.split(" ")[2];
                        if(!question.split(" ")[3].equalsIgnoreCase("to")){
                            article = question.split(" ")[3];
                            object = question.split(" ")[4];
                        }
                        else{
                            verb2 = question.split(" ")[4];
                        }
                        if(verb2.equals(""))
                            sendMessage(yesOrNo(question) + " " + reversePronoun(pronoun) + " " + verb + " " + article + " " + object + ".");
                        else
                            sendMessage(yesOrNo(question) + " " + reversePronoun(pronoun) + " " + verb + " to "  + verb2 + ".");
                    }
                    
                }
            }
        }
        
    }
    String reversePronoun(String pronoun){
        if(pronoun.equalsIgnoreCase("i") || pronoun.equalsIgnoreCase("we"))
            return "you";
        else if(pronoun.equalsIgnoreCase("you"))
            return "I";
        else
            return pronoun;
        
    }
    int beOrElse(String question){
        String[] be = {"am", "is", "are"};
        for (String b : be){
            if(question.split(" ")[0].equalsIgnoreCase(b))
                return 1;   // am, is, are
        }
        return 0;   // do, does, should, shall, must, may, can, could, might, etc.
    }
    private boolean isYesNoQuestion(String question) {
        String[] whQuestions = {"what", "why", "when", "where", "how", "who", "whose"};
        for (String q : whQuestions){
            if(question.split(" ")[0].equalsIgnoreCase(q))
                return false;   // WH question
        }
        return true;      // yes/no question
    }

    private String yesOrNo(String question) {
        
    }
}
